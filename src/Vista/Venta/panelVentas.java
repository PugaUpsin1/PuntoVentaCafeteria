package Vista.Venta;

import Controlador.Categoria;
import Controlador.Clientes;
import Controlador.MedodoPago;
import Controlador.Productos;
import Controlador.VentEstado;
import Controlador.Ventas;
import Controlador.Ventas;
import Modelo.sqlProductos;
import Modelo.sqlVentas;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jpos.POSPrinter;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import javax.swing.*;
import javax.swing.border.*;
import java.util.*;
import java.text.NumberFormat;
import java.text.DateFormat;
import java.sql.Time;

import jp.co.epson.upos.UPOSConst;
import jpos.*;
import jpos.config.JposEntryRegistry;
import jpos.loader.JposServiceLoader;
import jpos.util.JposPropertiesConst;


public class panelVentas extends javax.swing.JPanel {
    JTable Tvent;
    ResultSet rs;
    int totalV;
    public double tota;
    public String ref;
    public int idVE;
    public int idMeP;
    public int idCli;
    public int idVenta;
    POSPrinterControl114 ptr = (POSPrinterControl114)new POSPrinter();
    DefaultTableModel dtm = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                if(column==1){
                    return true;
                }else{
                    return false;
                }
            } 
        };
    ArrayList<Integer> cList = new ArrayList<Integer>();
    ArrayList<Integer> idvList = new ArrayList<Integer>();
    ArrayList<Integer> idplist = new ArrayList<Integer>();
    ArrayList<Integer> nom = new ArrayList<Integer>();
    ArrayList<Integer> cant = new ArrayList<Integer>();
    ArrayList<Integer> precio = new ArrayList<Integer>();
    
    
    
    // [1280, 569]
    public panelVentas() {
        initComponents();
        this.setBackground(Color.white);
        this.setSize(1288,570);
        
        llenarCatego();
        llenarMetodo();
        llenarClientes();
      //  tblDef();
        
        this.lblNumTick.setText("#");
        
        tblVentas.getTableHeader().setReorderingAllowed(false) ;
        Tvent = this.tblVentas;
        dtm.addColumn("ID");
        dtm.addColumn("Nombre");
        dtm.addColumn("Tama√±o");
        dtm.addColumn("Unidad");
        dtm.addColumn("Cantidad");
        dtm.addColumn("Precio");
        Tvent.setModel(dtm);
        

    }

    private void llenarCatego(){
        sqlProductos sqlPro = new sqlProductos();
        ArrayList<Categoria> listCat = sqlPro.getCategoria();
        cbxCatP.removeAllItems();
        

        for(int i = 0;i < listCat.size();i++){
            cbxCatP.addItem(new Categoria(listCat.get(i).getIdCat(), listCat.get(i).getCategoria()));
        }
    }
    private void llenarMetodo(){
        sqlVentas sqlven = new sqlVentas();
        ArrayList<MedodoPago> listMP = sqlven.getMetodoPago();
        cbxMetodo.removeAllItems();

        for(int i = 0;i < listMP.size();i++){
            cbxMetodo.addItem(new MedodoPago(listMP.get(i).getIdMP(), listMP.get(i).getMetodo()));
        }
    }   
    private void llenarClientes(){
        sqlVentas sqlven = new sqlVentas();
        ArrayList<Clientes> listCL = sqlven.getClientes();
        cbxClientes.removeAllItems();

        for(int i = 0;i < listCL.size();i++){
            cbxClientes.addItem(new Clientes(listCL.get(i).getIdCliente(), listCL.get(i).getNombre(), listCL.get(i).getApellidos()));
            
        }
    }  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        btnAggProd = new javax.swing.JButton();
        btnNuVE = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVentas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtDeposito = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCantVen = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbxClientes = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbxMetodo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbxProdV = new javax.swing.JComboBox<>();
        cbxCatP = new javax.swing.JComboBox<>();
        lblTotal = new javax.swing.JLabel();
        btnFinalizar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        btnCaVe = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lblNumTick = new javax.swing.JLabel();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("Nombre:");

        btnAggProd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/boton-agregar.png"))); // NOI18N
        btnAggProd.setText("Agregar");
        btnAggProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAggProdActionPerformed(evt);
            }
        });

        btnNuVE.setText("NUEVA VENTA");
        btnNuVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuVEActionPerformed(evt);
            }
        });
        btnNuVE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnNuVEKeyReleased(evt);
            }
        });

        tblVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblVentas);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Codigo de Producto:");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Cantidad:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel4.setText("Cliente:");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 22)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 51));
        jLabel5.setText("$");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 204, 51));
        jLabel6.setText("$");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel7.setText("Metodo de Pago:");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Total:");

        cbxProdV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxProdVItemStateChanged(evt);
            }
        });

        cbxCatP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxCatPItemStateChanged(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Helvetica Neue", 0, 20)); // NOI18N

        btnFinalizar.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/credit-card.png"))); // NOI18N
        btnFinalizar.setText("  F4");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });
        btnFinalizar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnFinalizarKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel13.setText("Paga con:");

        btnCaVe.setText("CANCELAR VENTA");
        btnCaVe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaVeActionPerformed(evt);
            }
        });
        btnCaVe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnCaVeKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 19)); // NOI18N
        jLabel10.setText("TICKET:");

        lblNumTick.setFont(new java.awt.Font("Helvetica Neue", 0, 19)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel4)
                        .addGap(8, 8, 8)
                        .addComponent(cbxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel7)
                        .addGap(1, 1, 1)
                        .addComponent(cbxMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(216, 216, 216)
                        .addComponent(jLabel13)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btnFinalizar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(cbxCatP, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(cbxProdV, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(txtCantVen, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnAggProd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(179, 179, 179)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnNuVE, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnCaVe)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumTick, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCaVe, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(lblNumTick, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuVE, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(cbxCatP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(cbxProdV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(txtCantVen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnAggProd))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(cbxClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(cbxMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel13))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(txtDeposito, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFinalizar)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbxProdVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxProdVItemStateChanged
       
    }//GEN-LAST:event_cbxProdVItemStateChanged

    private void cbxCatPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxCatPItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            int IdCat = cbxCatP.getItemAt(cbxCatP.getSelectedIndex()).getIdCat();
            sqlProductos sqlPro = new sqlProductos();
            ArrayList<Productos> listProd = sqlPro.getProductosVen(IdCat);
            cbxProdV.removeAllItems();

            for(int i = 0;i < listProd.size();i++){
                cbxProdV.addItem(new Productos(listProd.get(i).getIdPr(),listProd.get(i).getNombre(),listProd.get(i).getMedida(),listProd.get(i).getUnidad(), listProd.get(i).getPrecioVenta()));
            }
        }
    }//GEN-LAST:event_cbxCatPItemStateChanged

    private void btnNuVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuVEActionPerformed
        this.NuevaVent();
       
    }//GEN-LAST:event_btnNuVEActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        
        terminarVent();
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void btnCaVeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaVeActionPerformed
        CancelarVent();
    }//GEN-LAST:event_btnCaVeActionPerformed

    private void btnAggProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAggProdActionPerformed
        InserProdVen();
    }//GEN-LAST:event_btnAggProdActionPerformed

    private void btnFinalizarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnFinalizarKeyReleased
            
            this.terminarVent();
    }//GEN-LAST:event_btnFinalizarKeyReleased

    private void btnNuVEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnNuVEKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_F5){
            this.NuevaVent();
            
        }
    }//GEN-LAST:event_btnNuVEKeyReleased

    private void btnCaVeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCaVeKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_F6){
            this.CancelarVent();
        }
    }//GEN-LAST:event_btnCaVeKeyReleased
    
    public void CancelarVent(){
        if(this.lblNumTick.getText().equals("#")){
            JOptionPane.showMessageDialog(null, "No hay venta en curso"); 
        }else{
            sqlVentas sqlVen = new sqlVentas();
            Ventas ven = new Ventas();
            sqlVen.SelectId(ven);
            System.out.println(ven.getIdVent());
            ven.setIdVent(ven.getIdVent());
            if(sqlVen.DeleteVentas(ven)){
                JOptionPane.showMessageDialog(null, "Venta eliminada");
                this.lblTotal.setText("");
                txtCantVen.setText("");
                this.lblNumTick.setText("#");
                dtm.setRowCount(0);
                Tvent.revalidate();
                Tvent.repaint();
            }else{
                JOptionPane.showMessageDialog(null, "Error al eliminar");
            }    
        }    
    }
    
    public void ObtenerVen(){
        sqlVentas sqlVen = new sqlVentas();
        Ventas vent = new Ventas();
        sqlVen.SelectId(vent);
        String idv = String.valueOf(vent.getIdVent());
        this.lblNumTick.setText(idv);
    }
    
    public void NuevaVent(){
        if(this.lblNumTick.getText().equals("#")){
            sqlVentas sqlVen = new sqlVentas();
            Ventas vent = new Ventas();
            VentEstado VenE = new VentEstado();
            MedodoPago MetP = new MedodoPago();
            Clientes cli = new Clientes();

            VenE.setIdVE(1);

            if(sqlVen.AgregarVenta(vent,VenE,MetP,cli)){
                JOptionPane.showMessageDialog(null, "Ya puede Agregar Productos");
                ObtenerVen();
                lblTotal.setText("");
                txtCantVen.setText("");
                cList.clear();
                idplist.clear();
                idvList.clear();
                dtm.setRowCount(0);
                Tvent.revalidate();
                Tvent.repaint();

            }else{
                JOptionPane.showMessageDialog(null, "Error al Agregar Venta"); 
            } 
        }else{
            JOptionPane.showMessageDialog(null, "Venta en Curso"); 
        }    
    }
    
    public void InserProdVen(){
        if(this.lblNumTick.getText().equals("#")){
            JOptionPane.showMessageDialog(null, "Inicie una Venta"); 
        }else{
            String []info = new String[6];
            int idP = cbxProdV.getItemAt(cbxProdV.getSelectedIndex()).getIdPr();
            String idPStr = String.valueOf(idP);
            info[0]= idPStr; 
            String nom = cbxProdV.getItemAt(cbxProdV.getSelectedIndex()).getNombre();
            info[1] = nom;
            double med = cbxProdV.getItemAt(cbxProdV.getSelectedIndex()).getMedida();
            String medStr = String.valueOf(med);
            info[2] = medStr;
            info[3] = cbxProdV.getItemAt(cbxProdV.getSelectedIndex()).getUnidad();
            info[4] = this.txtCantVen.getText();
            int caInt = Integer.parseInt(this.txtCantVen.getText());
            double prec = cbxProdV.getItemAt(cbxProdV.getSelectedIndex()).getPrecioVenta();
            String precStr = String.valueOf(prec * caInt);
            info[5] = precStr;

            dtm.addRow(info);

            this.sumaTot();
            Ventas vent = new Ventas();
            sqlVentas sqlVen = new sqlVentas();
            sqlVen.SelectId(vent);
            String idv = String.valueOf(vent.getIdVent());

            cList.add(caInt);
            idplist.add(idP);
            idvList.add(vent.getIdVent());
            cbxProdV.setSelectedIndex(0);
            cbxCatP.setSelectedIndex(0);
            txtCantVen.setText("");
            
        }
    }
        
    public double sumaTot(){
        int contar = tblVentas.getRowCount();
        double Total = 0;
        for(int i = 0; i < contar ; i++){
            Total = Total + Double.parseDouble(tblVentas.getValueAt(i, 5).toString());
        }
        String tot = Double.toString(Total);
        this.lblTotal.setText(tot);
        return Total;
    }
    
    public void terminarVent(){
        if(this.lblNumTick.getText().equals("#")){
            JOptionPane.showMessageDialog(null, "Inicie una Venta"); 
        }else{
            if(this.txtDeposito.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Llena los campos"); 
            }else{
                sqlVentas sqlVen = new sqlVentas();
                Ventas ven = new Ventas();
                VentEstado ve = new VentEstado();
                MedodoPago mp = new MedodoPago();
                Clientes cl = new Clientes();
                double pagcon = Double.parseDouble(this.txtDeposito.getText());
                double cambio = pagcon - sumaTot();
                int idMP = cbxMetodo.getItemAt(cbxMetodo.getSelectedIndex()).getIdMP();
                double tot = this.sumaTot();
                ven.setTotal(tot);
                ve.setIdVE(2);
                mp.setIdMP(idMP);
                sqlVen.SelectId(ven);
                ven.setIdVent(ven.getIdVent());
                int clien = cbxClientes.getItemAt(cbxClientes.getSelectedIndex()).getIdCliente();
                cl.setIdCliente(clien);
                if(sqlVen.UpdateVen(ven, ve, mp, cl)){
                    sqlVen.InsertarProdVen(obtenerCantidad(),obtenerIdVen(),obtenerIdP());
                    JOptionPane.showMessageDialog(null, "Total: "+ sumaTot() + " Cambio: " + cambio);
//                    this.imprimir(tot, cambio, pagcon);
                    lblTotal.setText("");
                    txtCantVen.setText("");
                    txtDeposito.setText("");
                    lblNumTick.setText("#");
                    dtm.setRowCount(0);
                    Tvent.revalidate();
                    Tvent.repaint();
                    cbxProdV.setSelectedIndex(0);
                    cbxCatP.setSelectedIndex(0);
                    cbxMetodo.setSelectedIndex(0);
                    cbxClientes.setSelectedIndex(0);

                }else{
                    JOptionPane.showMessageDialog(null, "Error"); 
                }
            } 
        }
    }
    
    public ArrayList<Integer> obtenerCantidad() {
        ArrayList<Integer> canArr = new ArrayList<Integer>(); 
        canArr.addAll(cList);
        return canArr;
    }   
    public ArrayList<Integer> obtenerIdP() {
        ArrayList<Integer> arrIdp = new ArrayList<Integer>();
        arrIdp.addAll(idplist);
        return arrIdp;
    }
    public ArrayList<Integer> obtenerIdVen() {
        ArrayList<Integer> arrIdV = new ArrayList<Integer>();  
        arrIdV.addAll(idvList);
        return arrIdV;
    }
    
    void imprimir(double tot, double cambio, double pagcon){
        
        try {
                                
				//Open the device.
				//Use the name of the device that connected with your computer.
				ptr.open("POSPrinter");

				//Get the exclusive control right for the opened device.
				//Then the device is disable from other application.
				ptr.claim(1000);

				//Enable the device.
				ptr.setDeviceEnabled(true);
			}
			catch(JposException ex){
				
			}
			// JavaPOS's code for Step3
			try{
				// JavaPOS's code for Step5
				//Even if using any printers, 0.01mm unit makes it possible to print neatly.
				ptr.setMapMode(POSPrinterConst.PTR_MM_METRIC);
				// JavaPOS's code for Step5--END

				//Output by the high quality mode
				ptr.setRecLetterQuality(true);

				// JavaPOS's code for Step6
				if (ptr.getCapRecBitmap() == true)
					//Register a bitmap
					if (ptr.getCapRecBitmap() == true)
					{
						boolean bSetBitmapSuccess = false;
						for (int iRetryCount = 0; iRetryCount < 5; iRetryCount++)
						{
							try{
								//Register a bitmap
								ptr.setBitmap(1, POSPrinterConst.PTR_S_RECEIPT, "javapos.bmp",
										(ptr.getRecLineWidth() / 2), POSPrinterConst.PTR_BM_CENTER);
								bSetBitmapSuccess = true;
								break;
							} catch (JposException ex)
							{
								if (ex.getErrorCode() == UPOSConst.UPOS_E_FAILURE && ex.getErrorCodeExtended() == 0 && ex.getMessage().equals("It is not initialized."))
								{
									try{
										Thread.sleep(1000);
									} catch (InterruptedException ex2)
									{
									}
								}
							}
						}
						

					}
				// JavaPOS's code for Step6--END
			}
			catch(JposException ex){
			}
        
        
        
        DateFormat df = DateFormat.getDateInstance();
		Time t = new Time(System.currentTimeMillis());

		String time = df.format(Calendar.getInstance().getTime()) + " " + t.toString() + "\n";

		String    bcData = "4902720005074";
                int numRow = dtm.getRowCount();
                int numCols = dtm.getColumnCount();
                
                
                
                String[] item = new String[numRow];
                for(int i = 0; i < numRow ; i++){
                    item[i] = dtm.getValueAt(i, 1).toString();
                }
                String[] price = new String[numRow];
                for(int i = 0; i < numRow ; i++){
                    price[i] = dtm.getValueAt(i, 5).toString();
                }
                
                String[] cant = new String[numRow];
                for(int i = 0; i < numRow ; i++){
                    cant[i] = dtm.getValueAt(i, 4).toString();
                }
//		String[] item = {"apples", "grapes", "bananas", "lemons", "oranges"};
//		String[] price = {"10.00", "20.00", "30.00", "40.00", "50.00"};

		// JavaPOS's code for Step2
		try{
			// JavaPOS's code for Step6
			if (ptr.getCapRecPresent() == true){
				//Batch processing mode
				ptr.transactionPrint(POSPrinterConst.PTR_S_RECEIPT, POSPrinterConst.PTR_TP_TRANSACTION);
				// JavaPOS's code for Step6--END

				// JavaPOS's code for Step3
				//Print a registered bitmap.
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|1B");
				// JavaPOS's code for Step3--END

				// Print address
				//   ESC|N = Normal char
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA\u001b|3C Bolligue¬¥s \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|150uF");
				//Print phone number
				//   ESC|rA = Right side char
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA RFC   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA CALLE   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA FRACCIONAMIENTO   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA\u001b|2C LUGAR DE EXPEDICION \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA DOMICILIO   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA MAZATLAN, SINALOA   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA TEL #############   \n");
				// JavaPOS's code for Step5
				//Make 2mm speces
				//   ESC|#uF = Line Feed
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|200uF");
				// JavaPOS's code for Step5--END

				//Print date
				String charList[] = (ptr.getRecLineCharsList()).split(",");
				int iRecLineCharsCount = charList.length;
				if (iRecLineCharsCount >= 2) {
					ptr.setRecLineChars(Integer.parseInt(charList[1]));
					//   ESC|cA = Centaring char
					ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA" + time + "\n");
					ptr.setRecLineChars(Integer.parseInt(charList[0]));
				}
				else {
					//   ESC|cA = Centaring char
					ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA" + time + "\n");
				}
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA================================================  \n");
				// JavaPOS's code for Step5
				//Make 5mm speces
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|300uF");

				//Print buying goods
				double total = 0.0;
				String printData = "";
				for (int i = 0; i < item.length; i++){
					printData = makePrintString(ptr.getRecLineChars(),cant[i]+" "+item[i], "$" + price[i]);
					ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, printData + "\n");
				}

				//Make 2mm speces
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|200uF");

				//Print the total cost

				printData = makePrintString(ptr.getRecLineChars(), "IVA",
						formatForDouble(0.0));
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|uC" + printData + "\n");
                                
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|200uF");
                                
				printData = makePrintString((ptr.getRecLineChars() / 2), "Total",
						formatForDouble(tot));
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|bC\u001b|2C" + printData + "\n");

				printData = makePrintString(ptr.getRecLineChars(), "Pago Con", 
                                        formatForDouble(pagcon));
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, printData + "\n");

				printData = makePrintString(ptr.getRecLineChars(), "Cambio",
						formatForDouble(cambio));
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, printData + "\n");

				//Make 5mm speces
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|250uF");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA================================================  \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|250uF");
				//Barcode printing
				//Print from left side after 1cm spece.
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA\u001b|2C ESTE NO ES UN \n COMPROBANTE FISCAL \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA REDES SOCIALES:   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA FACEBOOK   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA INSTAGRAM   \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|300uF");
				// JavaPOS's code for Step5--END

				//Feed the receipt to the cutter position automatically, and cut.
				//   ESC|#fP = Line Feed and Paper cut
				ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|fP");

				// JavaPOS's code for Step6
				//print all the buffer data. and exit the batch processing mode.
				ptr.transactionPrint(POSPrinterConst.PTR_S_RECEIPT, POSPrinterConst.PTR_TP_NORMAL);
				// JavaPOS's code for Step6--END
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|1B");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|1000uF");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|cA\u001b|3C TARJETA¬¥s \n");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|1000uF");
                                ptr.printNormal(POSPrinterConst.PTR_S_RECEIPT, "\u001b|fP");
                                ptr.transactionPrint(POSPrinterConst.PTR_S_RECEIPT, POSPrinterConst.PTR_TP_NORMAL);
                                ptr.close();
			}
		}
		catch(JposException ex){
		}
    }
    
    public String makePrintString(int lineChars,String text1,String text2){
		int spaces = 0;
		String tab = "";
		try{
			spaces = lineChars - (text1.length() + text2.length());
			for (int j = 0 ; j < spaces ; j++){
				tab += " ";
			}
		}
		catch(Exception ex){
		}
		return text1 + tab + text2;
	}
    
    public String formatForDouble(double contents){
		String newFormNo = "";
		try{
			NumberFormat nf = NumberFormat.getCurrencyInstance(Locale.US);
			nf.setMaximumFractionDigits(2);
			nf.setMinimumFractionDigits(2);
			newFormNo = nf.format(contents);
		}
		catch(Exception ex){
		}
		return newFormNo;
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnAggProd;
    javax.swing.JButton btnCaVe;
    javax.swing.JButton btnFinalizar;
    javax.swing.JButton btnNuVE;
    javax.swing.JComboBox<Categoria> cbxCatP;
    javax.swing.JComboBox<Clientes> cbxClientes;
    javax.swing.JComboBox<MedodoPago> cbxMetodo;
    javax.swing.JComboBox<Productos> cbxProdV;
    javax.swing.JDesktopPane jDesktopPane1;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel13;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JLabel lblNumTick;
    public javax.swing.JLabel lblTotal;
    javax.swing.JTable tblVentas;
    public javax.swing.JTextField txtCantVen;
    javax.swing.JTextField txtDeposito;
    // End of variables declaration//GEN-END:variables
}
